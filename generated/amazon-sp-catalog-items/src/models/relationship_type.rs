/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RelationshipType : Specific variations of the item.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RelationshipType {
    #[serde(default, rename = "Identifiers", skip_serializing_if = "Option::is_none")]
    pub identifiers: Option<Box<crate::models::IdentifierType>>,
    /// The color variation of the item.
    #[serde(default, rename = "Color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// The edition variation of the item.
    #[serde(default, rename = "Edition", skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// The flavor variation of the item.
    #[serde(default, rename = "Flavor", skip_serializing_if = "Option::is_none")]
    pub flavor: Option<String>,
    /// The gem type variations of the item.
    #[serde(default, rename = "GemType", skip_serializing_if = "Option::is_none")]
    pub gem_type: Option<Vec<String>>,
    /// The golf club flex variation of an item.
    #[serde(default, rename = "GolfClubFlex", skip_serializing_if = "Option::is_none")]
    pub golf_club_flex: Option<String>,
    /// The hand orientation variation of an item.
    #[serde(default, rename = "HandOrientation", skip_serializing_if = "Option::is_none")]
    pub hand_orientation: Option<String>,
    /// The hardware platform variation of an item.
    #[serde(default, rename = "HardwarePlatform", skip_serializing_if = "Option::is_none")]
    pub hardware_platform: Option<String>,
    /// The material type variations of an item.
    #[serde(default, rename = "MaterialType", skip_serializing_if = "Option::is_none")]
    pub material_type: Option<Vec<String>>,
    /// The metal type variation of an item.
    #[serde(default, rename = "MetalType", skip_serializing_if = "Option::is_none")]
    pub metal_type: Option<String>,
    /// The model variation of an item.
    #[serde(default, rename = "Model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// The operating system variations of an item.
    #[serde(default, rename = "OperatingSystem", skip_serializing_if = "Option::is_none")]
    pub operating_system: Option<Vec<String>>,
    /// The product type subcategory variation of an item.
    #[serde(default, rename = "ProductTypeSubcategory", skip_serializing_if = "Option::is_none")]
    pub product_type_subcategory: Option<String>,
    /// The ring size variation of an item.
    #[serde(default, rename = "RingSize", skip_serializing_if = "Option::is_none")]
    pub ring_size: Option<String>,
    /// The shaft material variation of an item.
    #[serde(default, rename = "ShaftMaterial", skip_serializing_if = "Option::is_none")]
    pub shaft_material: Option<String>,
    /// The scent variation of an item.
    #[serde(default, rename = "Scent", skip_serializing_if = "Option::is_none")]
    pub scent: Option<String>,
    /// The size variation of an item.
    #[serde(default, rename = "Size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// The size per pearl variation of an item.
    #[serde(default, rename = "SizePerPearl", skip_serializing_if = "Option::is_none")]
    pub size_per_pearl: Option<String>,
    #[serde(default, rename = "GolfClubLoft", skip_serializing_if = "Option::is_none")]
    pub golf_club_loft: Option<Box<crate::models::DecimalWithUnits>>,
    #[serde(default, rename = "TotalDiamondWeight", skip_serializing_if = "Option::is_none")]
    pub total_diamond_weight: Option<Box<crate::models::DecimalWithUnits>>,
    #[serde(default, rename = "TotalGemWeight", skip_serializing_if = "Option::is_none")]
    pub total_gem_weight: Option<Box<crate::models::DecimalWithUnits>>,
    /// The package quantity variation of an item.
    #[serde(default, rename = "PackageQuantity", skip_serializing_if = "Option::is_none")]
    pub package_quantity: Option<i32>,
    #[serde(default, rename = "ItemDimensions", skip_serializing_if = "Option::is_none")]
    pub item_dimensions: Option<Box<crate::models::DimensionType>>,
}

impl RelationshipType {
    /// Specific variations of the item.
    pub fn new() -> RelationshipType {
        RelationshipType {
            identifiers: None,
            color: None,
            edition: None,
            flavor: None,
            gem_type: None,
            golf_club_flex: None,
            hand_orientation: None,
            hardware_platform: None,
            material_type: None,
            metal_type: None,
            model: None,
            operating_system: None,
            product_type_subcategory: None,
            ring_size: None,
            shaft_material: None,
            scent: None,
            size: None,
            size_per_pearl: None,
            golf_club_loft: None,
            total_diamond_weight: None,
            total_gem_weight: None,
            package_quantity: None,
            item_dimensions: None,
        }
    }
}


