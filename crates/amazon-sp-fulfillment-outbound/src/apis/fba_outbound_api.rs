/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`cancel_fulfillment_order`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelFulfillmentOrderError {
    Status400(crate::models::CancelFulfillmentOrderResponse),
    Status401(crate::models::CancelFulfillmentOrderResponse),
    Status403(crate::models::CancelFulfillmentOrderResponse),
    Status404(crate::models::CancelFulfillmentOrderResponse),
    Status429(crate::models::CancelFulfillmentOrderResponse),
    Status500(crate::models::CancelFulfillmentOrderResponse),
    Status503(crate::models::CancelFulfillmentOrderResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_fulfillment_order`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateFulfillmentOrderError {
    Status400(crate::models::CreateFulfillmentOrderResponse),
    Status401(crate::models::CreateFulfillmentOrderResponse),
    Status403(crate::models::CreateFulfillmentOrderResponse),
    Status404(crate::models::CreateFulfillmentOrderResponse),
    Status429(crate::models::CreateFulfillmentOrderResponse),
    Status500(crate::models::CreateFulfillmentOrderResponse),
    Status503(crate::models::CreateFulfillmentOrderResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_fulfillment_return`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateFulfillmentReturnError {
    Status400(crate::models::CreateFulfillmentReturnResponse),
    Status401(crate::models::CreateFulfillmentReturnResponse),
    Status403(crate::models::CreateFulfillmentReturnResponse),
    Status404(crate::models::CreateFulfillmentReturnResponse),
    Status429(crate::models::CreateFulfillmentReturnResponse),
    Status500(crate::models::CreateFulfillmentReturnResponse),
    Status503(crate::models::CreateFulfillmentReturnResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_feature_inventory`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFeatureInventoryError {
    Status400(crate::models::GetFeatureInventoryResponse),
    Status401(crate::models::GetFeatureInventoryResponse),
    Status403(crate::models::GetFeatureInventoryResponse),
    Status404(crate::models::GetFeatureInventoryResponse),
    Status429(crate::models::GetFeatureInventoryResponse),
    Status500(crate::models::GetFeatureInventoryResponse),
    Status503(crate::models::GetFeatureInventoryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_feature_sku`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFeatureSkuError {
    Status400(crate::models::GetFeatureSkuResponse),
    Status401(crate::models::GetFeatureSkuResponse),
    Status403(crate::models::GetFeatureSkuResponse),
    Status404(crate::models::GetFeatureSkuResponse),
    Status429(crate::models::GetFeatureSkuResponse),
    Status500(crate::models::GetFeatureSkuResponse),
    Status503(crate::models::GetFeatureSkuResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_features`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFeaturesError {
    Status400(crate::models::GetFeaturesResponse),
    Status401(crate::models::GetFeaturesResponse),
    Status403(crate::models::GetFeaturesResponse),
    Status404(crate::models::GetFeaturesResponse),
    Status429(crate::models::GetFeaturesResponse),
    Status500(crate::models::GetFeaturesResponse),
    Status503(crate::models::GetFeaturesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_fulfillment_order`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFulfillmentOrderError {
    Status400(crate::models::GetFulfillmentOrderResponse),
    Status401(crate::models::GetFulfillmentOrderResponse),
    Status403(crate::models::GetFulfillmentOrderResponse),
    Status404(crate::models::GetFulfillmentOrderResponse),
    Status429(crate::models::GetFulfillmentOrderResponse),
    Status500(crate::models::GetFulfillmentOrderResponse),
    Status503(crate::models::GetFulfillmentOrderResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_fulfillment_preview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFulfillmentPreviewError {
    Status400(crate::models::GetFulfillmentPreviewResponse),
    Status401(crate::models::GetFulfillmentPreviewResponse),
    Status403(crate::models::GetFulfillmentPreviewResponse),
    Status404(crate::models::GetFulfillmentPreviewResponse),
    Status429(crate::models::GetFulfillmentPreviewResponse),
    Status500(crate::models::GetFulfillmentPreviewResponse),
    Status503(crate::models::GetFulfillmentPreviewResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_package_tracking_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPackageTrackingDetailsError {
    Status400(crate::models::GetPackageTrackingDetailsResponse),
    Status401(crate::models::GetPackageTrackingDetailsResponse),
    Status403(crate::models::GetPackageTrackingDetailsResponse),
    Status404(crate::models::GetPackageTrackingDetailsResponse),
    Status429(crate::models::GetPackageTrackingDetailsResponse),
    Status500(crate::models::GetPackageTrackingDetailsResponse),
    Status503(crate::models::GetPackageTrackingDetailsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_all_fulfillment_orders`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAllFulfillmentOrdersError {
    Status400(crate::models::ListAllFulfillmentOrdersResponse),
    Status401(crate::models::ListAllFulfillmentOrdersResponse),
    Status403(crate::models::ListAllFulfillmentOrdersResponse),
    Status404(crate::models::ListAllFulfillmentOrdersResponse),
    Status429(crate::models::ListAllFulfillmentOrdersResponse),
    Status500(crate::models::ListAllFulfillmentOrdersResponse),
    Status503(crate::models::ListAllFulfillmentOrdersResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_return_reason_codes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListReturnReasonCodesError {
    Status400(crate::models::ListReturnReasonCodesResponse),
    Status401(crate::models::ListReturnReasonCodesResponse),
    Status403(crate::models::ListReturnReasonCodesResponse),
    Status404(crate::models::ListReturnReasonCodesResponse),
    Status429(crate::models::ListReturnReasonCodesResponse),
    Status500(crate::models::ListReturnReasonCodesResponse),
    Status503(crate::models::ListReturnReasonCodesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_fulfillment_order`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateFulfillmentOrderError {
    Status400(crate::models::UpdateFulfillmentOrderResponse),
    Status401(crate::models::UpdateFulfillmentOrderResponse),
    Status403(crate::models::UpdateFulfillmentOrderResponse),
    Status404(crate::models::UpdateFulfillmentOrderResponse),
    Status429(crate::models::UpdateFulfillmentOrderResponse),
    Status500(crate::models::UpdateFulfillmentOrderResponse),
    Status503(crate::models::UpdateFulfillmentOrderResponse),
    UnknownValue(serde_json::Value),
}


/// Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn cancel_fulfillment_order(configuration: &configuration::Configuration, seller_fulfillment_order_id: &str) -> Result<crate::models::CancelFulfillmentOrderResponse, Error<CancelFulfillmentOrderError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel", local_var_configuration.base_path, sellerFulfillmentOrderId=crate::apis::urlencode(seller_fulfillment_order_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelFulfillmentOrderError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Requests that Amazon ship items from the seller's inventory in Amazon's fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn create_fulfillment_order(configuration: &configuration::Configuration, body: crate::models::CreateFulfillmentOrderRequest) -> Result<crate::models::CreateFulfillmentOrderResponse, Error<CreateFulfillmentOrderError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateFulfillmentOrderError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a fulfillment return.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn create_fulfillment_return(configuration: &configuration::Configuration, seller_fulfillment_order_id: &str, body: crate::models::CreateFulfillmentReturnRequest) -> Result<crate::models::CreateFulfillmentReturnResponse, Error<CreateFulfillmentReturnError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return", local_var_configuration.base_path, sellerFulfillmentOrderId=crate::apis::urlencode(seller_fulfillment_order_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateFulfillmentReturnError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_feature_inventory(configuration: &configuration::Configuration, marketplace_id: &str, feature_name: &str, next_token: Option<&str>) -> Result<crate::models::GetFeatureInventoryResponse, Error<GetFeatureInventoryError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/features/inventory/{featureName}", local_var_configuration.base_path, featureName=crate::apis::urlencode(feature_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("marketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("nextToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFeatureInventoryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn't eligible, the response will contain an empty skuInfo object.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_feature_sku(configuration: &configuration::Configuration, marketplace_id: &str, feature_name: &str, seller_sku: &str) -> Result<crate::models::GetFeatureSkuResponse, Error<GetFeatureSkuError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}", local_var_configuration.base_path, featureName=crate::apis::urlencode(feature_name), sellerSku=crate::apis::urlencode(seller_sku));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("marketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFeatureSkuError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_features(configuration: &configuration::Configuration, marketplace_id: &str) -> Result<crate::models::GetFeaturesResponse, Error<GetFeaturesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/features", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("marketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFeaturesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_fulfillment_order(configuration: &configuration::Configuration, seller_fulfillment_order_id: &str) -> Result<crate::models::GetFulfillmentOrderResponse, Error<GetFulfillmentOrderError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}", local_var_configuration.base_path, sellerFulfillmentOrderId=crate::apis::urlencode(seller_fulfillment_order_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFulfillmentOrderError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_fulfillment_preview(configuration: &configuration::Configuration, body: crate::models::GetFulfillmentPreviewRequest) -> Result<crate::models::GetFulfillmentPreviewResponse, Error<GetFulfillmentPreviewError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders/preview", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFulfillmentPreviewError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_package_tracking_details(configuration: &configuration::Configuration, package_number: i32) -> Result<crate::models::GetPackageTrackingDetailsResponse, Error<GetPackageTrackingDetailsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/tracking", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("packageNumber", &package_number.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPackageTrackingDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn list_all_fulfillment_orders(configuration: &configuration::Configuration, query_start_date: Option<String>, next_token: Option<&str>) -> Result<crate::models::ListAllFulfillmentOrdersResponse, Error<ListAllFulfillmentOrdersError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = query_start_date {
        local_var_req_builder = local_var_req_builder.query(&[("queryStartDate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("nextToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAllFulfillmentOrdersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of return reason codes for a seller SKU in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn list_return_reason_codes(configuration: &configuration::Configuration, seller_sku: &str, language: &str, marketplace_id: Option<&str>, seller_fulfillment_order_id: Option<&str>) -> Result<crate::models::ListReturnReasonCodesResponse, Error<ListReturnReasonCodesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/returnReasonCodes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("sellerSku", &seller_sku.to_string())]);
    if let Some(ref local_var_str) = marketplace_id {
        local_var_req_builder = local_var_req_builder.query(&[("marketplaceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = seller_fulfillment_order_id {
        local_var_req_builder = local_var_req_builder.query(&[("sellerFulfillmentOrderId", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("language", &language.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListReturnReasonCodesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn update_fulfillment_order(configuration: &configuration::Configuration, seller_fulfillment_order_id: &str, body: crate::models::UpdateFulfillmentOrderRequest) -> Result<crate::models::UpdateFulfillmentOrderResponse, Error<UpdateFulfillmentOrderError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}", local_var_configuration.base_path, sellerFulfillmentOrderId=crate::apis::urlencode(seller_fulfillment_order_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateFulfillmentOrderError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

