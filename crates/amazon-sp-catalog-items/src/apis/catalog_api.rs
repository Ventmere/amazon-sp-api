/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_catalog_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCatalogItemError {
    Status400(crate::models::GetCatalogItemResponse),
    Status401(crate::models::GetCatalogItemResponse),
    Status403(crate::models::GetCatalogItemResponse),
    Status404(crate::models::GetCatalogItemResponse),
    Status429(crate::models::GetCatalogItemResponse),
    Status500(crate::models::GetCatalogItemResponse),
    Status503(crate::models::GetCatalogItemResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_catalog_categories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCatalogCategoriesError {
    Status400(crate::models::ListCatalogCategoriesResponse),
    Status401(crate::models::ListCatalogCategoriesResponse),
    Status403(crate::models::ListCatalogCategoriesResponse),
    Status404(crate::models::ListCatalogCategoriesResponse),
    Status429(crate::models::ListCatalogCategoriesResponse),
    Status500(crate::models::ListCatalogCategoriesResponse),
    Status503(crate::models::ListCatalogCategoriesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_catalog_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCatalogItemsError {
    Status400(crate::models::ListCatalogItemsResponse),
    Status401(crate::models::ListCatalogItemsResponse),
    Status403(crate::models::ListCatalogItemsResponse),
    Status404(crate::models::ListCatalogItemsResponse),
    Status429(crate::models::ListCatalogItemsResponse),
    Status500(crate::models::ListCatalogItemsResponse),
    Status503(crate::models::ListCatalogItemsResponse),
    UnknownValue(serde_json::Value),
}


/// Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_catalog_item(configuration: &configuration::Configuration, marketplace_id: &str, asin: &str) -> Result<crate::models::GetCatalogItemResponse, Error<GetCatalogItemError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/catalog/v0/items/{asin}", local_var_configuration.base_path, asin=crate::apis::urlencode(asin));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCatalogItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn list_catalog_categories(configuration: &configuration::Configuration, marketplace_id: &str, ASIN: Option<&str>, seller_sku: Option<&str>) -> Result<crate::models::ListCatalogCategoriesResponse, Error<ListCatalogCategoriesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/catalog/v0/categories", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = ASIN {
        local_var_req_builder = local_var_req_builder.query(&[("ASIN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = seller_sku {
        local_var_req_builder = local_var_req_builder.query(&[("SellerSKU", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCatalogCategoriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value.  MarketplaceId is always required. At least one of Query, SellerSKU, UPC, EAN, ISBN, JAN is also required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn list_catalog_items(configuration: &configuration::Configuration, marketplace_id: &str, query: Option<&str>, query_context_id: Option<&str>, seller_sku: Option<&str>, UPC: Option<&str>, EAN: Option<&str>, ISBN: Option<&str>, JAN: Option<&str>) -> Result<crate::models::ListCatalogItemsResponse, Error<ListCatalogItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/catalog/v0/items", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("Query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_context_id {
        local_var_req_builder = local_var_req_builder.query(&[("QueryContextId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = seller_sku {
        local_var_req_builder = local_var_req_builder.query(&[("SellerSKU", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = UPC {
        local_var_req_builder = local_var_req_builder.query(&[("UPC", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = EAN {
        local_var_req_builder = local_var_req_builder.query(&[("EAN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ISBN {
        local_var_req_builder = local_var_req_builder.query(&[("ISBN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = JAN {
        local_var_req_builder = local_var_req_builder.query(&[("JAN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCatalogItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

