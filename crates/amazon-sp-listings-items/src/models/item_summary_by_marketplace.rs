/*
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ItemSummaryByMarketplace : Summary details of a listings item for an Amazon marketplace.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ItemSummaryByMarketplace {
    /// A marketplace identifier. Identifies the Amazon marketplace for the listings item.
    #[serde(rename = "marketplaceId")]
    pub marketplace_id: String,
    /// Amazon Standard Identification Number (ASIN) of the listings item.
    #[serde(rename = "asin")]
    pub asin: String,
    /// The Amazon product type of the listings item.
    #[serde(rename = "productType")]
    pub product_type: String,
    /// Identifies the condition of the listings item.
    #[serde(rename = "conditionType", skip_serializing_if = "Option::is_none")]
    pub condition_type: Option<ConditionType>,
    /// Statuses that apply to the listings item.
    #[serde(rename = "status")]
    pub status: Vec<Status>,
    /// Fulfillment network stock keeping unit is an identifier used by Amazon fulfillment centers to identify each unique item.
    #[serde(rename = "fnSku", skip_serializing_if = "Option::is_none")]
    pub fn_sku: Option<String>,
    /// Name, or title, associated with an Amazon catalog item.
    #[serde(rename = "itemName")]
    pub item_name: String,
    /// Date the listings item was created, in ISO 8601 format.
    #[serde(rename = "createdDate")]
    pub created_date: String,
    /// Date the listings item was last updated, in ISO 8601 format.
    #[serde(rename = "lastUpdatedDate")]
    pub last_updated_date: String,
    #[serde(rename = "mainImage", skip_serializing_if = "Option::is_none")]
    pub main_image: Option<Box<crate::models::ItemImage>>,
}

impl ItemSummaryByMarketplace {
    /// Summary details of a listings item for an Amazon marketplace.
    pub fn new(marketplace_id: String, asin: String, product_type: String, status: Vec<Status>, item_name: String, created_date: String, last_updated_date: String) -> ItemSummaryByMarketplace {
        ItemSummaryByMarketplace {
            marketplace_id,
            asin,
            product_type,
            condition_type: None,
            status,
            fn_sku: None,
            item_name,
            created_date,
            last_updated_date,
            main_image: None,
        }
    }
}

/// Identifies the condition of the listings item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "new_new")]
    NewNew,
    #[serde(rename = "new_open_box")]
    NewOpenBox,
    #[serde(rename = "new_oem")]
    NewOem,
    #[serde(rename = "refurbished_refurbished")]
    RefurbishedRefurbished,
    #[serde(rename = "used_like_new")]
    UsedLikeNew,
    #[serde(rename = "used_very_good")]
    UsedVeryGood,
    #[serde(rename = "used_good")]
    UsedGood,
    #[serde(rename = "used_acceptable")]
    UsedAcceptable,
    #[serde(rename = "collectible_like_new")]
    CollectibleLikeNew,
    #[serde(rename = "collectible_very_good")]
    CollectibleVeryGood,
    #[serde(rename = "collectible_good")]
    CollectibleGood,
    #[serde(rename = "collectible_acceptable")]
    CollectibleAcceptable,
    #[serde(rename = "club_club")]
    ClubClub,
}

impl Default for ConditionType {
    fn default() -> ConditionType {
        Self::NewNew
    }
}
/// Statuses that apply to the listings item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "BUYABLE")]
    BUYABLE,
    #[serde(rename = "DISCOVERABLE")]
    DISCOVERABLE,
}

impl Default for Status {
    fn default() -> Status {
        Self::BUYABLE
    }
}

