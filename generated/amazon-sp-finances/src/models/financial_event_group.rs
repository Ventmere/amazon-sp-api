/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// FinancialEventGroup : Information related to a financial event group.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FinancialEventGroup {
    /// A unique identifier for the financial event group.
    #[serde(default, rename = "FinancialEventGroupId", skip_serializing_if = "Option::is_none")]
    pub financial_event_group_id: Option<String>,
    /// The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
    #[serde(default, rename = "ProcessingStatus", skip_serializing_if = "Option::is_none")]
    pub processing_status: Option<String>,
    /// The status of the fund transfer.
    #[serde(default, rename = "FundTransferStatus", skip_serializing_if = "Option::is_none")]
    pub fund_transfer_status: Option<String>,
    #[serde(default, rename = "OriginalTotal", skip_serializing_if = "Option::is_none")]
    pub original_total: Option<Box<crate::models::Currency>>,
    #[serde(default, rename = "ConvertedTotal", skip_serializing_if = "Option::is_none")]
    pub converted_total: Option<Box<crate::models::Currency>>,
    #[serde(default, rename = "FundTransferDate", skip_serializing_if = "Option::is_none")]
    pub fund_transfer_date: Option<String>,
    /// The trace identifier used by sellers to look up transactions externally.
    #[serde(default, rename = "TraceId", skip_serializing_if = "Option::is_none")]
    pub trace_id: Option<String>,
    /// The account tail of the payment instrument.
    #[serde(default, rename = "AccountTail", skip_serializing_if = "Option::is_none")]
    pub account_tail: Option<String>,
    #[serde(default, rename = "BeginningBalance", skip_serializing_if = "Option::is_none")]
    pub beginning_balance: Option<Box<crate::models::Currency>>,
    #[serde(default, rename = "FinancialEventGroupStart", skip_serializing_if = "Option::is_none")]
    pub financial_event_group_start: Option<String>,
    #[serde(default, rename = "FinancialEventGroupEnd", skip_serializing_if = "Option::is_none")]
    pub financial_event_group_end: Option<String>,
}

impl FinancialEventGroup {
    /// Information related to a financial event group.
    pub fn new() -> FinancialEventGroup {
        FinancialEventGroup {
            financial_event_group_id: None,
            processing_status: None,
            fund_transfer_status: None,
            original_total: None,
            converted_total: None,
            fund_transfer_date: None,
            trace_id: None,
            account_tail: None,
            beginning_balance: None,
            financial_event_group_start: None,
            financial_event_group_end: None,
        }
    }
}


