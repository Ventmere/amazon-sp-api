/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AppointmentSlotReport : Availability information as per the service context queried.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AppointmentSlotReport {
    /// Defines the type of slots.
    #[serde(rename = "schedulingType", skip_serializing_if = "Option::is_none")]
    pub scheduling_type: Option<SchedulingType>,
    /// Start Time from which the appointment slots are generated in ISO 8601 format.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// End Time up to which the appointment slots are generated in ISO 8601 format.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// A list of time windows along with associated capacity in which the service can be performed.
    #[serde(rename = "appointmentSlots", skip_serializing_if = "Option::is_none")]
    pub appointment_slots: Option<Vec<crate::models::AppointmentSlot>>,
}

impl AppointmentSlotReport {
    /// Availability information as per the service context queried.
    pub fn new() -> AppointmentSlotReport {
        AppointmentSlotReport {
            scheduling_type: None,
            start_time: None,
            end_time: None,
            appointment_slots: None,
        }
    }
}

/// Defines the type of slots.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SchedulingType {
    #[serde(rename = "REAL_TIME_SCHEDULING")]
    REALTIMESCHEDULING,
    #[serde(rename = "NON_REAL_TIME_SCHEDULING")]
    NONREALTIMESCHEDULING,
}

impl Default for SchedulingType {
    fn default() -> SchedulingType {
        Self::REALTIMESCHEDULING
    }
}

