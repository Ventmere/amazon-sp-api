/*
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NetworkComminglingTransactionEvent : A network commingling transaction event.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NetworkComminglingTransactionEvent {
    /// The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
    #[serde(default, rename = "TransactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<String>,
    #[serde(default, rename = "PostedDate", skip_serializing_if = "Option::is_none")]
    pub posted_date: Option<String>,
    /// The identifier for the network item swap.
    #[serde(default, rename = "NetCoTransactionID", skip_serializing_if = "Option::is_none")]
    pub net_co_transaction_id: Option<String>,
    /// The reason for the network item swap.
    #[serde(default, rename = "SwapReason", skip_serializing_if = "Option::is_none")]
    pub swap_reason: Option<String>,
    /// The Amazon Standard Identification Number (ASIN) of the swapped item.
    #[serde(default, rename = "ASIN", skip_serializing_if = "Option::is_none")]
    pub ASIN: Option<String>,
    /// The marketplace in which the event took place.
    #[serde(default, rename = "MarketplaceId", skip_serializing_if = "Option::is_none")]
    pub marketplace_id: Option<String>,
    #[serde(default, rename = "TaxExclusiveAmount", skip_serializing_if = "Option::is_none")]
    pub tax_exclusive_amount: Option<Box<crate::models::Currency>>,
    #[serde(default, rename = "TaxAmount", skip_serializing_if = "Option::is_none")]
    pub tax_amount: Option<Box<crate::models::Currency>>,
}

impl NetworkComminglingTransactionEvent {
    /// A network commingling transaction event.
    pub fn new() -> NetworkComminglingTransactionEvent {
        NetworkComminglingTransactionEvent {
            transaction_type: None,
            posted_date: None,
            net_co_transaction_id: None,
            swap_reason: None,
            ASIN: None,
            marketplace_id: None,
            tax_exclusive_amount: None,
            tax_amount: None,
        }
    }
}


