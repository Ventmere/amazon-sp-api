/*
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_packing_slip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPackingSlipError {
    Status400(crate::models::GetPackingSlipResponse),
    Status401(crate::models::GetPackingSlipResponse),
    Status403(crate::models::GetPackingSlipResponse),
    Status404(crate::models::GetPackingSlipResponse),
    Status415(crate::models::GetPackingSlipResponse),
    Status429(crate::models::GetPackingSlipResponse),
    Status500(crate::models::GetPackingSlipResponse),
    Status503(crate::models::GetPackingSlipResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_packing_slips`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPackingSlipsError {
    Status400(crate::models::GetPackingSlipListResponse),
    Status401(crate::models::GetPackingSlipListResponse),
    Status403(crate::models::GetPackingSlipListResponse),
    Status404(crate::models::GetPackingSlipListResponse),
    Status415(crate::models::GetPackingSlipListResponse),
    Status429(crate::models::GetPackingSlipListResponse),
    Status500(crate::models::GetPackingSlipListResponse),
    Status503(crate::models::GetPackingSlipListResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_shipment_confirmations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitShipmentConfirmationsError {
    Status400(crate::models::SubmitShipmentConfirmationsResponse),
    Status403(crate::models::SubmitShipmentConfirmationsResponse),
    Status404(crate::models::SubmitShipmentConfirmationsResponse),
    Status413(crate::models::SubmitShipmentConfirmationsResponse),
    Status415(crate::models::SubmitShipmentConfirmationsResponse),
    Status429(crate::models::SubmitShipmentConfirmationsResponse),
    Status500(crate::models::SubmitShipmentConfirmationsResponse),
    Status503(crate::models::SubmitShipmentConfirmationsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_shipment_status_updates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitShipmentStatusUpdatesError {
    Status400(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status403(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status404(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status413(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status415(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status429(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status500(crate::models::SubmitShipmentStatusUpdatesResponse),
    Status503(crate::models::SubmitShipmentStatusUpdatesResponse),
    UnknownValue(serde_json::Value),
}


/// Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_packing_slip(configuration: &configuration::Configuration, purchase_order_number: &str) -> Result<crate::models::GetPackingSlipResponse, Error<GetPackingSlipError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vendor/directFulfillment/shipping/v1/packingSlips/{purchaseOrderNumber}", local_var_configuration.base_path, purchaseOrderNumber=crate::apis::urlencode(purchase_order_number));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPackingSlipError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_packing_slips(configuration: &configuration::Configuration, created_after: String, created_before: String, ship_from_party_id: Option<&str>, limit: Option<i32>, sort_order: Option<&str>, next_token: Option<&str>) -> Result<crate::models::GetPackingSlipListResponse, Error<GetPackingSlipsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vendor/directFulfillment/shipping/v1/packingSlips", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ship_from_party_id {
        local_var_req_builder = local_var_req_builder.query(&[("shipFromPartyId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("createdAfter", &created_after.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("createdBefore", &created_before.to_string())]);
    if let Some(ref local_var_str) = sort_order {
        local_var_req_builder = local_var_req_builder.query(&[("sortOrder", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("nextToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPackingSlipsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn submit_shipment_confirmations(configuration: &configuration::Configuration, body: crate::models::SubmitShipmentConfirmationsRequest) -> Result<crate::models::SubmitShipmentConfirmationsResponse, Error<SubmitShipmentConfirmationsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vendor/directFulfillment/shipping/v1/shipmentConfirmations", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SubmitShipmentConfirmationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn submit_shipment_status_updates(configuration: &configuration::Configuration, body: crate::models::SubmitShipmentStatusUpdatesRequest) -> Result<crate::models::SubmitShipmentStatusUpdatesResponse, Error<SubmitShipmentStatusUpdatesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vendor/directFulfillment/shipping/v1/shipmentStatusUpdates", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SubmitShipmentStatusUpdatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

