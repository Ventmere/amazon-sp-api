/*
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 */

/// FulfillmentOrderItem : Item information for a fulfillment order.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FulfillmentOrderItem {
    /// The seller SKU of the item.
    #[serde(rename = "sellerSku")]
    pub seller_sku: String,
    /// A fulfillment order item identifier submitted with a call to the createFulfillmentOrder operation.
    #[serde(rename = "sellerFulfillmentOrderItemId")]
    pub seller_fulfillment_order_item_id: String,
    /// The item quantity.
    #[serde(rename = "quantity")]
    pub quantity: i32,
    /// A message to the gift recipient, if applicable.
    #[serde(rename = "giftMessage", skip_serializing_if = "Option::is_none")]
    pub gift_message: Option<String>,
    /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
    #[serde(rename = "displayableComment", skip_serializing_if = "Option::is_none")]
    pub displayable_comment: Option<String>,
    /// Amazon's fulfillment network SKU of the item.
    #[serde(rename = "fulfillmentNetworkSku", skip_serializing_if = "Option::is_none")]
    pub fulfillment_network_sku: Option<String>,
    /// Indicates whether the item is sellable or unsellable.
    #[serde(rename = "orderItemDisposition", skip_serializing_if = "Option::is_none")]
    pub order_item_disposition: Option<String>,
    /// The item quantity.
    #[serde(rename = "cancelledQuantity")]
    pub cancelled_quantity: i32,
    /// The item quantity.
    #[serde(rename = "unfulfillableQuantity")]
    pub unfulfillable_quantity: i32,
    #[serde(rename = "estimatedShipDate", skip_serializing_if = "Option::is_none")]
    pub estimated_ship_date: Option<String>,
    #[serde(rename = "estimatedArrivalDate", skip_serializing_if = "Option::is_none")]
    pub estimated_arrival_date: Option<String>,
    #[serde(rename = "perUnitPrice", skip_serializing_if = "Option::is_none")]
    pub per_unit_price: Option<Box<crate::models::Money>>,
    #[serde(rename = "perUnitTax", skip_serializing_if = "Option::is_none")]
    pub per_unit_tax: Option<Box<crate::models::Money>>,
    #[serde(rename = "perUnitDeclaredValue", skip_serializing_if = "Option::is_none")]
    pub per_unit_declared_value: Option<Box<crate::models::Money>>,
}

impl FulfillmentOrderItem {
    /// Item information for a fulfillment order.
    pub fn new(seller_sku: String, seller_fulfillment_order_item_id: String, quantity: i32, cancelled_quantity: i32, unfulfillable_quantity: i32) -> FulfillmentOrderItem {
        FulfillmentOrderItem {
            seller_sku,
            seller_fulfillment_order_item_id,
            quantity,
            gift_message: None,
            displayable_comment: None,
            fulfillment_network_sku: None,
            order_item_disposition: None,
            cancelled_quantity,
            unfulfillable_quantity,
            estimated_ship_date: None,
            estimated_arrival_date: None,
            per_unit_price: None,
            per_unit_tax: None,
            per_unit_declared_value: None,
        }
    }
}


