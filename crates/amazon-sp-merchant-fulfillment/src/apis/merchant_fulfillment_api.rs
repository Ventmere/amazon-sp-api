/*
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`cancel_shipment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelShipmentError {
    Status400(crate::models::CancelShipmentResponse),
    Status401(crate::models::CancelShipmentResponse),
    Status403(crate::models::CancelShipmentResponse),
    Status404(crate::models::CancelShipmentResponse),
    Status429(crate::models::CancelShipmentResponse),
    Status500(crate::models::CancelShipmentResponse),
    Status503(crate::models::CancelShipmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cancel_shipment_old`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelShipmentOldError {
    Status400(crate::models::CancelShipmentResponse),
    Status401(crate::models::CancelShipmentResponse),
    Status403(crate::models::CancelShipmentResponse),
    Status404(crate::models::CancelShipmentResponse),
    Status429(crate::models::CancelShipmentResponse),
    Status500(crate::models::CancelShipmentResponse),
    Status503(crate::models::CancelShipmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_shipment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateShipmentError {
    Status400(crate::models::CreateShipmentResponse),
    Status401(crate::models::CreateShipmentResponse),
    Status403(crate::models::CreateShipmentResponse),
    Status404(crate::models::CreateShipmentResponse),
    Status429(crate::models::CreateShipmentResponse),
    Status500(crate::models::CreateShipmentResponse),
    Status503(crate::models::CreateShipmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_additional_seller_inputs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAdditionalSellerInputsError {
    Status400(crate::models::GetAdditionalSellerInputsResponse),
    Status401(crate::models::GetAdditionalSellerInputsResponse),
    Status403(crate::models::GetAdditionalSellerInputsResponse),
    Status404(crate::models::GetAdditionalSellerInputsResponse),
    Status429(crate::models::GetAdditionalSellerInputsResponse),
    Status500(crate::models::GetAdditionalSellerInputsResponse),
    Status503(crate::models::GetAdditionalSellerInputsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_additional_seller_inputs_old`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAdditionalSellerInputsOldError {
    Status400(crate::models::GetAdditionalSellerInputsResponse),
    Status401(crate::models::GetAdditionalSellerInputsResponse),
    Status403(crate::models::GetAdditionalSellerInputsResponse),
    Status404(crate::models::GetAdditionalSellerInputsResponse),
    Status429(crate::models::GetAdditionalSellerInputsResponse),
    Status500(crate::models::GetAdditionalSellerInputsResponse),
    Status503(crate::models::GetAdditionalSellerInputsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_eligible_shipment_services`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibleShipmentServicesError {
    Status400(crate::models::GetEligibleShipmentServicesResponse),
    Status401(crate::models::GetEligibleShipmentServicesResponse),
    Status403(crate::models::GetEligibleShipmentServicesResponse),
    Status404(crate::models::GetEligibleShipmentServicesResponse),
    Status429(crate::models::GetEligibleShipmentServicesResponse),
    Status500(crate::models::GetEligibleShipmentServicesResponse),
    Status503(crate::models::GetEligibleShipmentServicesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_eligible_shipment_services_old`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibleShipmentServicesOldError {
    Status400(crate::models::GetEligibleShipmentServicesResponse),
    Status401(crate::models::GetEligibleShipmentServicesResponse),
    Status403(crate::models::GetEligibleShipmentServicesResponse),
    Status404(crate::models::GetEligibleShipmentServicesResponse),
    Status429(crate::models::GetEligibleShipmentServicesResponse),
    Status500(crate::models::GetEligibleShipmentServicesResponse),
    Status503(crate::models::GetEligibleShipmentServicesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipmentError {
    Status400(crate::models::GetShipmentResponse),
    Status401(crate::models::GetShipmentResponse),
    Status403(crate::models::GetShipmentResponse),
    Status404(crate::models::GetShipmentResponse),
    Status429(crate::models::GetShipmentResponse),
    Status500(crate::models::GetShipmentResponse),
    Status503(crate::models::GetShipmentResponse),
    UnknownValue(serde_json::Value),
}


/// Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn cancel_shipment(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::CancelShipmentResponse, Error<CancelShipmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/shipments/{shipmentId}", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelShipmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn cancel_shipment_old(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::CancelShipmentResponse, Error<CancelShipmentOldError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/shipments/{shipmentId}/cancel", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelShipmentOldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn create_shipment(configuration: &configuration::Configuration, body: crate::models::CreateShipmentRequest) -> Result<crate::models::CreateShipmentResponse, Error<CreateShipmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/shipments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateShipmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_additional_seller_inputs(configuration: &configuration::Configuration, body: crate::models::GetAdditionalSellerInputsRequest) -> Result<crate::models::GetAdditionalSellerInputsResponse, Error<GetAdditionalSellerInputsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/additionalSellerInputs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAdditionalSellerInputsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_additional_seller_inputs_old(configuration: &configuration::Configuration, body: crate::models::GetAdditionalSellerInputsRequest) -> Result<crate::models::GetAdditionalSellerInputsResponse, Error<GetAdditionalSellerInputsOldError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/sellerInputs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAdditionalSellerInputsOldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_eligible_shipment_services(configuration: &configuration::Configuration, body: crate::models::GetEligibleShipmentServicesRequest) -> Result<crate::models::GetEligibleShipmentServicesResponse, Error<GetEligibleShipmentServicesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/eligibleShippingServices", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetEligibleShipmentServicesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_eligible_shipment_services_old(configuration: &configuration::Configuration, body: crate::models::GetEligibleShipmentServicesRequest) -> Result<crate::models::GetEligibleShipmentServicesResponse, Error<GetEligibleShipmentServicesOldError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/eligibleServices", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetEligibleShipmentServicesOldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_shipment(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::GetShipmentResponse, Error<GetShipmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mfn/v0/shipments/{shipmentId}", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetShipmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

