/*
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Order : Order information.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Order {
    /// An Amazon-defined order identifier, in 3-7-7 format.
    #[serde(rename = "AmazonOrderId")]
    pub amazon_order_id: String,
    /// A seller-defined order identifier.
    #[serde(rename = "SellerOrderId", skip_serializing_if = "Option::is_none")]
    pub seller_order_id: Option<String>,
    /// The date when the order was created.
    #[serde(rename = "PurchaseDate")]
    pub purchase_date: String,
    /// The date when the order was last updated.  Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
    #[serde(rename = "LastUpdateDate")]
    pub last_update_date: String,
    /// The current order status.
    #[serde(rename = "OrderStatus")]
    pub order_status: OrderStatus,
    /// Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
    #[serde(rename = "FulfillmentChannel", skip_serializing_if = "Option::is_none")]
    pub fulfillment_channel: Option<FulfillmentChannel>,
    /// The sales channel of the first item in the order.
    #[serde(rename = "SalesChannel", skip_serializing_if = "Option::is_none")]
    pub sales_channel: Option<String>,
    /// The order channel of the first item in the order.
    #[serde(rename = "OrderChannel", skip_serializing_if = "Option::is_none")]
    pub order_channel: Option<String>,
    /// The shipment service level of the order.
    #[serde(rename = "ShipServiceLevel", skip_serializing_if = "Option::is_none")]
    pub ship_service_level: Option<String>,
    #[serde(rename = "OrderTotal", skip_serializing_if = "Option::is_none")]
    pub order_total: Option<Box<crate::models::Money>>,
    /// The number of items shipped.
    #[serde(rename = "NumberOfItemsShipped", skip_serializing_if = "Option::is_none")]
    pub number_of_items_shipped: Option<i32>,
    /// The number of items unshipped.
    #[serde(rename = "NumberOfItemsUnshipped", skip_serializing_if = "Option::is_none")]
    pub number_of_items_unshipped: Option<i32>,
    /// A list of payment execution detail items.
    #[serde(rename = "PaymentExecutionDetail", skip_serializing_if = "Option::is_none")]
    pub payment_execution_detail: Option<Vec<crate::models::PaymentExecutionDetailItem>>,
    /// The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
    #[serde(rename = "PaymentMethod", skip_serializing_if = "Option::is_none")]
    pub payment_method: Option<PaymentMethod>,
    /// A list of payment method detail items.
    #[serde(rename = "PaymentMethodDetails", skip_serializing_if = "Option::is_none")]
    pub payment_method_details: Option<Vec<String>>,
    /// The identifier for the marketplace where the order was placed.
    #[serde(rename = "MarketplaceId", skip_serializing_if = "Option::is_none")]
    pub marketplace_id: Option<String>,
    /// The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
    #[serde(rename = "ShipmentServiceLevelCategory", skip_serializing_if = "Option::is_none")]
    pub shipment_service_level_category: Option<String>,
    /// The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.  Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
    #[serde(rename = "EasyShipShipmentStatus", skip_serializing_if = "Option::is_none")]
    pub easy_ship_shipment_status: Option<String>,
    /// Custom ship label for Checkout by Amazon (CBA).
    #[serde(rename = "CbaDisplayableShippingLabel", skip_serializing_if = "Option::is_none")]
    pub cba_displayable_shipping_label: Option<String>,
    /// The type of the order.
    #[serde(rename = "OrderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    /// The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
    #[serde(rename = "EarliestShipDate", skip_serializing_if = "Option::is_none")]
    pub earliest_ship_date: Option<String>,
    /// The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
    #[serde(rename = "LatestShipDate", skip_serializing_if = "Option::is_none")]
    pub latest_ship_date: Option<String>,
    /// The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
    #[serde(rename = "EarliestDeliveryDate", skip_serializing_if = "Option::is_none")]
    pub earliest_delivery_date: Option<String>,
    /// The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
    #[serde(rename = "LatestDeliveryDate", skip_serializing_if = "Option::is_none")]
    pub latest_delivery_date: Option<String>,
    /// When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
    #[serde(rename = "IsBusinessOrder", skip_serializing_if = "Option::is_none")]
    pub is_business_order: Option<bool>,
    /// When true, the order is a seller-fulfilled Amazon Prime order.
    #[serde(rename = "IsPrime", skip_serializing_if = "Option::is_none")]
    pub is_prime: Option<bool>,
    /// When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
    #[serde(rename = "IsPremiumOrder", skip_serializing_if = "Option::is_none")]
    pub is_premium_order: Option<bool>,
    /// When true, the order is a GlobalExpress order.
    #[serde(rename = "IsGlobalExpressEnabled", skip_serializing_if = "Option::is_none")]
    pub is_global_express_enabled: Option<bool>,
    /// The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
    #[serde(rename = "ReplacedOrderId", skip_serializing_if = "Option::is_none")]
    pub replaced_order_id: Option<String>,
    /// When true, this is a replacement order.
    #[serde(rename = "IsReplacementOrder", skip_serializing_if = "Option::is_none")]
    pub is_replacement_order: Option<bool>,
    /// Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
    #[serde(rename = "PromiseResponseDueDate", skip_serializing_if = "Option::is_none")]
    pub promise_response_due_date: Option<String>,
    /// When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
    #[serde(rename = "IsEstimatedShipDateSet", skip_serializing_if = "Option::is_none")]
    pub is_estimated_ship_date_set: Option<bool>,
    /// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
    #[serde(rename = "IsSoldByAB", skip_serializing_if = "Option::is_none")]
    pub is_sold_by_ab: Option<bool>,
    /// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
    #[serde(rename = "IsIBA", skip_serializing_if = "Option::is_none")]
    pub is_iba: Option<bool>,
    #[serde(rename = "DefaultShipFromLocationAddress", skip_serializing_if = "Option::is_none")]
    pub default_ship_from_location_address: Option<Box<crate::models::Address>>,
    /// The buyer's invoicing preference. Available only in the TR marketplace.
    #[serde(rename = "BuyerInvoicePreference", skip_serializing_if = "Option::is_none")]
    pub buyer_invoice_preference: Option<BuyerInvoicePreference>,
    #[serde(rename = "BuyerTaxInformation", skip_serializing_if = "Option::is_none")]
    pub buyer_tax_information: Option<Box<crate::models::BuyerTaxInformation>>,
    #[serde(rename = "FulfillmentInstruction", skip_serializing_if = "Option::is_none")]
    pub fulfillment_instruction: Option<Box<crate::models::FulfillmentInstruction>>,
    /// When true, this order is marked to be picked up from a store rather than delivered.
    #[serde(rename = "IsISPU", skip_serializing_if = "Option::is_none")]
    pub is_ispu: Option<bool>,
    /// When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
    #[serde(rename = "IsAccessPointOrder", skip_serializing_if = "Option::is_none")]
    pub is_access_point_order: Option<bool>,
    #[serde(rename = "MarketplaceTaxInfo", skip_serializing_if = "Option::is_none")]
    pub marketplace_tax_info: Option<Box<crate::models::MarketplaceTaxInfo>>,
    /// The seller’s friendly name registered in the marketplace.
    #[serde(rename = "SellerDisplayName", skip_serializing_if = "Option::is_none")]
    pub seller_display_name: Option<String>,
    #[serde(rename = "ShippingAddress", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<Box<crate::models::Address>>,
    #[serde(rename = "BuyerInfo", skip_serializing_if = "Option::is_none")]
    pub buyer_info: Option<Box<crate::models::BuyerInfo>>,
    #[serde(rename = "AutomatedShippingSettings", skip_serializing_if = "Option::is_none")]
    pub automated_shipping_settings: Option<Box<crate::models::AutomatedShippingSettings>>,
    /// Whether the order contains regulated items which may require additional approval steps before being fulfilled.
    #[serde(rename = "HasRegulatedItems", skip_serializing_if = "Option::is_none")]
    pub has_regulated_items: Option<bool>,
}

impl Order {
    /// Order information.
    pub fn new(amazon_order_id: String, purchase_date: String, last_update_date: String, order_status: OrderStatus) -> Order {
        Order {
            amazon_order_id,
            seller_order_id: None,
            purchase_date,
            last_update_date,
            order_status,
            fulfillment_channel: None,
            sales_channel: None,
            order_channel: None,
            ship_service_level: None,
            order_total: None,
            number_of_items_shipped: None,
            number_of_items_unshipped: None,
            payment_execution_detail: None,
            payment_method: None,
            payment_method_details: None,
            marketplace_id: None,
            shipment_service_level_category: None,
            easy_ship_shipment_status: None,
            cba_displayable_shipping_label: None,
            order_type: None,
            earliest_ship_date: None,
            latest_ship_date: None,
            earliest_delivery_date: None,
            latest_delivery_date: None,
            is_business_order: None,
            is_prime: None,
            is_premium_order: None,
            is_global_express_enabled: None,
            replaced_order_id: None,
            is_replacement_order: None,
            promise_response_due_date: None,
            is_estimated_ship_date_set: None,
            is_sold_by_ab: None,
            is_iba: None,
            default_ship_from_location_address: None,
            buyer_invoice_preference: None,
            buyer_tax_information: None,
            fulfillment_instruction: None,
            is_ispu: None,
            is_access_point_order: None,
            marketplace_tax_info: None,
            seller_display_name: None,
            shipping_address: None,
            buyer_info: None,
            automated_shipping_settings: None,
            has_regulated_items: None,
        }
    }
}

/// The current order status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderStatus {
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Unshipped")]
    Unshipped,
    #[serde(rename = "PartiallyShipped")]
    PartiallyShipped,
    #[serde(rename = "Shipped")]
    Shipped,
    #[serde(rename = "Canceled")]
    Canceled,
    #[serde(rename = "Unfulfillable")]
    Unfulfillable,
    #[serde(rename = "InvoiceUnconfirmed")]
    InvoiceUnconfirmed,
    #[serde(rename = "PendingAvailability")]
    PendingAvailability,
}

impl Default for OrderStatus {
    fn default() -> OrderStatus {
        Self::Pending
    }
}
/// Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FulfillmentChannel {
    #[serde(rename = "MFN")]
    MFN,
    #[serde(rename = "AFN")]
    AFN,
}

impl Default for FulfillmentChannel {
    fn default() -> FulfillmentChannel {
        Self::MFN
    }
}
/// The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentMethod {
    #[serde(rename = "COD")]
    COD,
    #[serde(rename = "CVS")]
    CVS,
    #[serde(rename = "Other")]
    Other,
}

impl Default for PaymentMethod {
    fn default() -> PaymentMethod {
        Self::COD
    }
}
/// The type of the order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "StandardOrder")]
    StandardOrder,
    #[serde(rename = "LongLeadTimeOrder")]
    LongLeadTimeOrder,
    #[serde(rename = "Preorder")]
    Preorder,
    #[serde(rename = "BackOrder")]
    BackOrder,
    #[serde(rename = "SourcingOnDemandOrder")]
    SourcingOnDemandOrder,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::StandardOrder
    }
}
/// The buyer's invoicing preference. Available only in the TR marketplace.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BuyerInvoicePreference {
    #[serde(rename = "INDIVIDUAL")]
    INDIVIDUAL,
    #[serde(rename = "BUSINESS")]
    BUSINESS,
}

impl Default for BuyerInvoicePreference {
    fn default() -> BuyerInvoicePreference {
        Self::INDIVIDUAL
    }
}

