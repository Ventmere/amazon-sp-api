/*
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// UpdateReservationRecord : `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateReservationRecord {
    #[serde(rename = "reservation", skip_serializing_if = "Option::is_none")]
    pub reservation: Option<Box<crate::models::Reservation>>,
    /// A list of warnings returned in the sucessful execution response of an API request.
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<crate::models::Warning>>,
    /// A list of error responses returned when a request is unsuccessful.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<crate::models::Error>>,
}

impl UpdateReservationRecord {
    /// `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
    pub fn new() -> UpdateReservationRecord {
        UpdateReservationRecord {
            reservation: None,
            warnings: None,
            errors: None,
        }
    }
}


