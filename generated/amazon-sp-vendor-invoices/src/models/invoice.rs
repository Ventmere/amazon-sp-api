/*
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Invoice {
    /// Identifies the type of invoice.
    #[serde(default, rename = "invoiceType")]
    pub invoice_type: InvoiceType,
    /// Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
    #[serde(default, rename = "id")]
    pub id: String,
    /// An additional unique reference number used for regulatory or other purposes.
    #[serde(default, rename = "referenceNumber", skip_serializing_if = "Option::is_none")]
    pub reference_number: Option<String>,
    /// Defines a date and time according to ISO8601.
    #[serde(default, rename = "date")]
    pub date: String,
    #[serde(default, rename = "remitToParty")]
    pub remit_to_party: Box<crate::models::PartyIdentification>,
    #[serde(default, rename = "shipToParty", skip_serializing_if = "Option::is_none")]
    pub ship_to_party: Option<Box<crate::models::PartyIdentification>>,
    #[serde(default, rename = "shipFromParty", skip_serializing_if = "Option::is_none")]
    pub ship_from_party: Option<Box<crate::models::PartyIdentification>>,
    #[serde(default, rename = "billToParty", skip_serializing_if = "Option::is_none")]
    pub bill_to_party: Option<Box<crate::models::PartyIdentification>>,
    #[serde(default, rename = "paymentTerms", skip_serializing_if = "Option::is_none")]
    pub payment_terms: Option<Box<crate::models::PaymentTerms>>,
    #[serde(default, rename = "invoiceTotal")]
    pub invoice_total: Box<crate::models::Money>,
    /// Total tax amount details for all line items.
    #[serde(default, rename = "taxDetails", skip_serializing_if = "Option::is_none")]
    pub tax_details: Option<Vec<crate::models::TaxDetails>>,
    /// Additional details provided by the selling party, for tax related or other purposes.
    #[serde(default, rename = "additionalDetails", skip_serializing_if = "Option::is_none")]
    pub additional_details: Option<Vec<crate::models::AdditionalDetails>>,
    /// Total charge amount details for all line items.
    #[serde(default, rename = "chargeDetails", skip_serializing_if = "Option::is_none")]
    pub charge_details: Option<Vec<crate::models::ChargeDetails>>,
    /// Total allowance amount details for all line items.
    #[serde(default, rename = "allowanceDetails", skip_serializing_if = "Option::is_none")]
    pub allowance_details: Option<Vec<crate::models::AllowanceDetails>>,
    /// The list of invoice items.
    #[serde(default, rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<crate::models::InvoiceItem>>,
}

impl Invoice {
    pub fn new(invoice_type: InvoiceType, id: String, date: String, remit_to_party: crate::models::PartyIdentification, invoice_total: crate::models::Money) -> Invoice {
        Invoice {
            invoice_type,
            id,
            reference_number: None,
            date,
            remit_to_party: Box::new(remit_to_party),
            ship_to_party: None,
            ship_from_party: None,
            bill_to_party: None,
            payment_terms: None,
            invoice_total: Box::new(invoice_total),
            tax_details: None,
            additional_details: None,
            charge_details: None,
            allowance_details: None,
            items: None,
        }
    }
}

/// Identifies the type of invoice.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvoiceType {
    #[serde(rename = "Invoice")]
    Invoice,
    #[serde(rename = "CreditNote")]
    CreditNote,
}

impl Default for InvoiceType {
    fn default() -> InvoiceType {
        Self::Invoice
    }
}

