/*
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};
use amazon_sp_api_shared::request::UrlBuilder;


/// struct for typed errors of method [`get_catalog_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCatalogItemError {
    Status400(crate::models::GetCatalogItemResponse),
    Status401(crate::models::GetCatalogItemResponse),
    Status403(crate::models::GetCatalogItemResponse),
    Status404(crate::models::GetCatalogItemResponse),
    Status429(crate::models::GetCatalogItemResponse),
    Status500(crate::models::GetCatalogItemResponse),
    Status503(crate::models::GetCatalogItemResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_catalog_categories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCatalogCategoriesError {
    Status400(crate::models::ListCatalogCategoriesResponse),
    Status401(crate::models::ListCatalogCategoriesResponse),
    Status403(crate::models::ListCatalogCategoriesResponse),
    Status404(crate::models::ListCatalogCategoriesResponse),
    Status429(crate::models::ListCatalogCategoriesResponse),
    Status500(crate::models::ListCatalogCategoriesResponse),
    Status503(crate::models::ListCatalogCategoriesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_catalog_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCatalogItemsError {
    Status400(crate::models::ListCatalogItemsResponse),
    Status401(crate::models::ListCatalogItemsResponse),
    Status403(crate::models::ListCatalogItemsResponse),
    Status404(crate::models::ListCatalogItemsResponse),
    Status429(crate::models::ListCatalogItemsResponse),
    Status500(crate::models::ListCatalogItemsResponse),
    Status503(crate::models::ListCatalogItemsResponse),
    UnknownValue(serde_json::Value),
}


/// Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | deprecated | deprecated |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn get_catalog_item(configuration: &configuration::Configuration, marketplace_id: &str, asin: &str) -> Result<crate::models::GetCatalogItemResponse, Error<GetCatalogItemError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;


    let local_var_uri_str = format!("{}/catalog/v0/items/{asin}", local_var_configuration.base_path, asin=crate::apis::urlencode(asin));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
    #[allow(unused_mut)]
    let mut url_builder = UrlBuilder::parse(&local_var_uri_str)?;

    url_builder = url_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);

    let url = url_builder.build()?;

    if let Some(ref local_var_aws_v4_key) = local_var_configuration.aws_v4_key {
        let local_var_new_headers = match local_var_aws_v4_key.sign(
	    url.as_str(),
	    "GET",
        if let Some(ref auth) = configuration.auth {
            Some(auth.get_access_token(&configuration.client).await?)
        } else {
            None
        },
	    &"",
	    ) {
	      Ok(new_headers) => new_headers,
	      Err(err) => return Err(Error::AWSV4SignatureError(err)),
	    };
	for (local_var_name, local_var_value) in local_var_new_headers.iter() {
	    local_var_req_builder = local_var_req_builder.header(local_var_name.as_str(), local_var_value.as_str());
	}
    }

    if let Some(ref auth) = local_var_configuration.auth {
        let token = auth.get_access_token(&local_var_configuration.client).await?;
        local_var_req_builder = local_var_req_builder.header("x-amz-access-token", token.as_str());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    *local_var_req.url_mut() = url;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCatalogItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn list_catalog_categories(configuration: &configuration::Configuration, marketplace_id: &str, ASIN: Option<&str>, seller_sku: Option<&str>) -> Result<crate::models::ListCatalogCategoriesResponse, Error<ListCatalogCategoriesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;


    let local_var_uri_str = format!("{}/catalog/v0/categories", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
    #[allow(unused_mut)]
    let mut url_builder = UrlBuilder::parse(&local_var_uri_str)?;

    url_builder = url_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = ASIN {
        url_builder = url_builder.query(&[("ASIN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = seller_sku {
        url_builder = url_builder.query(&[("SellerSKU", &local_var_str.to_string())]);
    }

    let url = url_builder.build()?;

    if let Some(ref local_var_aws_v4_key) = local_var_configuration.aws_v4_key {
        let local_var_new_headers = match local_var_aws_v4_key.sign(
	    url.as_str(),
	    "GET",
        if let Some(ref auth) = configuration.auth {
            Some(auth.get_access_token(&configuration.client).await?)
        } else {
            None
        },
	    &"",
	    ) {
	      Ok(new_headers) => new_headers,
	      Err(err) => return Err(Error::AWSV4SignatureError(err)),
	    };
	for (local_var_name, local_var_value) in local_var_new_headers.iter() {
	    local_var_req_builder = local_var_req_builder.header(local_var_name.as_str(), local_var_value.as_str());
	}
    }

    if let Some(ref auth) = local_var_configuration.auth {
        let token = auth.get_access_token(&local_var_configuration.client).await?;
        local_var_req_builder = local_var_req_builder.header("x-amz-access-token", token.as_str());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    *local_var_req.url_mut() = url;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCatalogCategoriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value.  MarketplaceId is always required. At least one of Query, SellerSKU, UPC, EAN, ISBN, JAN is also required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | deprecated | deprecated |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
pub async fn list_catalog_items(configuration: &configuration::Configuration, marketplace_id: &str, query: Option<&str>, query_context_id: Option<&str>, seller_sku: Option<&str>, UPC: Option<&str>, EAN: Option<&str>, ISBN: Option<&str>, JAN: Option<&str>) -> Result<crate::models::ListCatalogItemsResponse, Error<ListCatalogItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;


    let local_var_uri_str = format!("{}/catalog/v0/items", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
    #[allow(unused_mut)]
    let mut url_builder = UrlBuilder::parse(&local_var_uri_str)?;

    url_builder = url_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = query {
        url_builder = url_builder.query(&[("Query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_context_id {
        url_builder = url_builder.query(&[("QueryContextId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = seller_sku {
        url_builder = url_builder.query(&[("SellerSKU", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = UPC {
        url_builder = url_builder.query(&[("UPC", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = EAN {
        url_builder = url_builder.query(&[("EAN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ISBN {
        url_builder = url_builder.query(&[("ISBN", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = JAN {
        url_builder = url_builder.query(&[("JAN", &local_var_str.to_string())]);
    }

    let url = url_builder.build()?;

    if let Some(ref local_var_aws_v4_key) = local_var_configuration.aws_v4_key {
        let local_var_new_headers = match local_var_aws_v4_key.sign(
	    url.as_str(),
	    "GET",
        if let Some(ref auth) = configuration.auth {
            Some(auth.get_access_token(&configuration.client).await?)
        } else {
            None
        },
	    &"",
	    ) {
	      Ok(new_headers) => new_headers,
	      Err(err) => return Err(Error::AWSV4SignatureError(err)),
	    };
	for (local_var_name, local_var_value) in local_var_new_headers.iter() {
	    local_var_req_builder = local_var_req_builder.header(local_var_name.as_str(), local_var_value.as_str());
	}
    }

    if let Some(ref auth) = local_var_configuration.auth {
        let token = auth.get_access_token(&local_var_configuration.client).await?;
        local_var_req_builder = local_var_req_builder.header("x-amz-access-token", token.as_str());
    }

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let mut local_var_req = local_var_req_builder.build()?;
    *local_var_req.url_mut() = url;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCatalogItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

