/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`confirm_preorder`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConfirmPreorderError {
    Status400(crate::models::ConfirmPreorderResponse),
    Status401(crate::models::ConfirmPreorderResponse),
    Status403(crate::models::ConfirmPreorderResponse),
    Status404(crate::models::ConfirmPreorderResponse),
    Status429(crate::models::ConfirmPreorderResponse),
    Status500(crate::models::ConfirmPreorderResponse),
    Status503(crate::models::ConfirmPreorderResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`confirm_transport`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConfirmTransportError {
    Status400(crate::models::ConfirmTransportResponse),
    Status401(crate::models::ConfirmTransportResponse),
    Status403(crate::models::ConfirmTransportResponse),
    Status404(crate::models::ConfirmTransportResponse),
    Status429(crate::models::ConfirmTransportResponse),
    Status500(crate::models::ConfirmTransportResponse),
    Status503(crate::models::ConfirmTransportResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_inbound_shipment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateInboundShipmentError {
    Status400(crate::models::InboundShipmentResponse),
    Status401(crate::models::InboundShipmentResponse),
    Status403(crate::models::InboundShipmentResponse),
    Status404(crate::models::InboundShipmentResponse),
    Status429(crate::models::InboundShipmentResponse),
    Status500(crate::models::InboundShipmentResponse),
    Status503(crate::models::InboundShipmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_inbound_shipment_plan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateInboundShipmentPlanError {
    Status400(crate::models::CreateInboundShipmentPlanResponse),
    Status401(crate::models::CreateInboundShipmentPlanResponse),
    Status403(crate::models::CreateInboundShipmentPlanResponse),
    Status404(crate::models::CreateInboundShipmentPlanResponse),
    Status429(crate::models::CreateInboundShipmentPlanResponse),
    Status500(crate::models::CreateInboundShipmentPlanResponse),
    Status503(crate::models::CreateInboundShipmentPlanResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`estimate_transport`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EstimateTransportError {
    Status400(crate::models::EstimateTransportResponse),
    Status401(crate::models::EstimateTransportResponse),
    Status403(crate::models::EstimateTransportResponse),
    Status404(crate::models::EstimateTransportResponse),
    Status429(crate::models::EstimateTransportResponse),
    Status500(crate::models::EstimateTransportResponse),
    Status503(crate::models::EstimateTransportResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bill_of_lading`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBillOfLadingError {
    Status400(crate::models::GetBillOfLadingResponse),
    Status401(crate::models::GetBillOfLadingResponse),
    Status403(crate::models::GetBillOfLadingResponse),
    Status404(crate::models::GetBillOfLadingResponse),
    Status429(crate::models::GetBillOfLadingResponse),
    Status500(crate::models::GetBillOfLadingResponse),
    Status503(crate::models::GetBillOfLadingResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_inbound_guidance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInboundGuidanceError {
    Status400(crate::models::GetInboundGuidanceResponse),
    Status401(crate::models::GetInboundGuidanceResponse),
    Status403(crate::models::GetInboundGuidanceResponse),
    Status404(crate::models::GetInboundGuidanceResponse),
    Status429(crate::models::GetInboundGuidanceResponse),
    Status500(crate::models::GetInboundGuidanceResponse),
    Status503(crate::models::GetInboundGuidanceResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_labels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLabelsError {
    Status400(crate::models::GetLabelsResponse),
    Status401(crate::models::GetLabelsResponse),
    Status403(crate::models::GetLabelsResponse),
    Status404(crate::models::GetLabelsResponse),
    Status429(crate::models::GetLabelsResponse),
    Status500(crate::models::GetLabelsResponse),
    Status503(crate::models::GetLabelsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_preorder_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPreorderInfoError {
    Status400(crate::models::GetPreorderInfoResponse),
    Status401(crate::models::GetPreorderInfoResponse),
    Status403(crate::models::GetPreorderInfoResponse),
    Status404(crate::models::GetPreorderInfoResponse),
    Status429(crate::models::GetPreorderInfoResponse),
    Status500(crate::models::GetPreorderInfoResponse),
    Status503(crate::models::GetPreorderInfoResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_prep_instructions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPrepInstructionsError {
    Status400(crate::models::GetPrepInstructionsResponse),
    Status401(crate::models::GetPrepInstructionsResponse),
    Status403(crate::models::GetPrepInstructionsResponse),
    Status404(crate::models::GetPrepInstructionsResponse),
    Status429(crate::models::GetPrepInstructionsResponse),
    Status500(crate::models::GetPrepInstructionsResponse),
    Status503(crate::models::GetPrepInstructionsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipment_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipmentItemsError {
    Status400(crate::models::GetShipmentItemsResponse),
    Status401(crate::models::GetShipmentItemsResponse),
    Status403(crate::models::GetShipmentItemsResponse),
    Status404(crate::models::GetShipmentItemsResponse),
    Status429(crate::models::GetShipmentItemsResponse),
    Status500(crate::models::GetShipmentItemsResponse),
    Status503(crate::models::GetShipmentItemsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipment_items_by_shipment_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipmentItemsByShipmentIdError {
    Status400(crate::models::GetShipmentItemsResponse),
    Status401(crate::models::GetShipmentItemsResponse),
    Status403(crate::models::GetShipmentItemsResponse),
    Status404(crate::models::GetShipmentItemsResponse),
    Status429(crate::models::GetShipmentItemsResponse),
    Status500(crate::models::GetShipmentItemsResponse),
    Status503(crate::models::GetShipmentItemsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_shipments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipmentsError {
    Status400(crate::models::GetShipmentsResponse),
    Status401(crate::models::GetShipmentsResponse),
    Status403(crate::models::GetShipmentsResponse),
    Status404(crate::models::GetShipmentsResponse),
    Status429(crate::models::GetShipmentsResponse),
    Status500(crate::models::GetShipmentsResponse),
    Status503(crate::models::GetShipmentsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transport_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransportDetailsError {
    Status400(crate::models::GetTransportDetailsResponse),
    Status401(crate::models::GetTransportDetailsResponse),
    Status403(crate::models::GetTransportDetailsResponse),
    Status404(crate::models::GetTransportDetailsResponse),
    Status429(crate::models::GetTransportDetailsResponse),
    Status500(crate::models::GetTransportDetailsResponse),
    Status503(crate::models::GetTransportDetailsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_transport_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutTransportDetailsError {
    Status400(crate::models::PutTransportDetailsResponse),
    Status401(crate::models::PutTransportDetailsResponse),
    Status403(crate::models::PutTransportDetailsResponse),
    Status404(crate::models::PutTransportDetailsResponse),
    Status429(crate::models::PutTransportDetailsResponse),
    Status500(crate::models::PutTransportDetailsResponse),
    Status503(crate::models::PutTransportDetailsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_inbound_shipment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateInboundShipmentError {
    Status400(crate::models::InboundShipmentResponse),
    Status401(crate::models::InboundShipmentResponse),
    Status403(crate::models::InboundShipmentResponse),
    Status404(crate::models::InboundShipmentResponse),
    Status429(crate::models::InboundShipmentResponse),
    Status500(crate::models::InboundShipmentResponse),
    Status503(crate::models::InboundShipmentResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`void_transport`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VoidTransportError {
    Status400(crate::models::VoidTransportResponse),
    Status401(crate::models::VoidTransportResponse),
    Status403(crate::models::VoidTransportResponse),
    Status404(crate::models::VoidTransportResponse),
    Status429(crate::models::VoidTransportResponse),
    Status500(crate::models::VoidTransportResponse),
    Status503(crate::models::VoidTransportResponse),
    UnknownValue(serde_json::Value),
}


/// Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn confirm_preorder(configuration: &configuration::Configuration, shipment_id: &str, need_by_date: String, marketplace_id: &str) -> Result<crate::models::ConfirmPreorderResponse, Error<ConfirmPreorderError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("NeedByDate", &need_by_date.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConfirmPreorderError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn confirm_transport(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::ConfirmTransportResponse, Error<ConfirmTransportError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/confirm", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConfirmTransportError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn create_inbound_shipment(configuration: &configuration::Configuration, shipment_id: &str, body: crate::models::InboundShipmentRequest) -> Result<crate::models::InboundShipmentResponse, Error<CreateInboundShipmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateInboundShipmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn create_inbound_shipment_plan(configuration: &configuration::Configuration, body: crate::models::CreateInboundShipmentPlanRequest) -> Result<crate::models::CreateInboundShipmentPlanResponse, Error<CreateInboundShipmentPlanError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/plans", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateInboundShipmentPlanError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn estimate_transport(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::EstimateTransportResponse, Error<EstimateTransportError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/estimate", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EstimateTransportError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_bill_of_lading(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::GetBillOfLadingResponse, Error<GetBillOfLadingError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/billOfLading", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBillOfLadingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon's fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_inbound_guidance(configuration: &configuration::Configuration, marketplace_id: &str, seller_sku_list: Option<Vec<String>>, asin_list: Option<Vec<String>>) -> Result<crate::models::GetInboundGuidanceResponse, Error<GetInboundGuidanceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/itemsGuidance", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_str) = seller_sku_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("SellerSKUList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("SellerSKUList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = asin_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ASINList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ASINList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetInboundGuidanceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_labels(configuration: &configuration::Configuration, shipment_id: &str, page_type: &str, label_type: &str, number_of_packages: Option<i32>, package_labels_to_print: Option<Vec<String>>, number_of_pallets: Option<i32>, page_size: Option<i32>, page_start_index: Option<i32>) -> Result<crate::models::GetLabelsResponse, Error<GetLabelsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/labels", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("PageType", &page_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("LabelType", &label_type.to_string())]);
    if let Some(ref local_var_str) = number_of_packages {
        local_var_req_builder = local_var_req_builder.query(&[("NumberOfPackages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = package_labels_to_print {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("PackageLabelsToPrint".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("PackageLabelsToPrint", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = number_of_pallets {
        local_var_req_builder = local_var_req_builder.query(&[("NumberOfPallets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("PageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_start_index {
        local_var_req_builder = local_var_req_builder.query(&[("PageStartIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLabelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_preorder_info(configuration: &configuration::Configuration, shipment_id: &str, marketplace_id: &str) -> Result<crate::models::GetPreorderInfoResponse, Error<GetPreorderInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/preorder", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPreorderInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_prep_instructions(configuration: &configuration::Configuration, ship_to_country_code: &str, seller_sku_list: Option<Vec<String>>, asin_list: Option<Vec<String>>) -> Result<crate::models::GetPrepInstructionsResponse, Error<GetPrepInstructionsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/prepInstructions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ShipToCountryCode", &ship_to_country_code.to_string())]);
    if let Some(ref local_var_str) = seller_sku_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("SellerSKUList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("SellerSKUList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = asin_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ASINList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ASINList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPrepInstructionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_shipment_items(configuration: &configuration::Configuration, query_type: &str, marketplace_id: &str, last_updated_after: Option<String>, last_updated_before: Option<String>, next_token: Option<&str>) -> Result<crate::models::GetShipmentItemsResponse, Error<GetShipmentItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipmentItems", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = last_updated_after {
        local_var_req_builder = local_var_req_builder.query(&[("LastUpdatedAfter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated_before {
        local_var_req_builder = local_var_req_builder.query(&[("LastUpdatedBefore", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("QueryType", &query_type.to_string())]);
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("NextToken", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetShipmentItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_shipment_items_by_shipment_id(configuration: &configuration::Configuration, shipment_id: &str, marketplace_id: &str) -> Result<crate::models::GetShipmentItemsResponse, Error<GetShipmentItemsByShipmentIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/items", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetShipmentItemsByShipmentIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_shipments(configuration: &configuration::Configuration, query_type: &str, marketplace_id: &str, shipment_status_list: Option<Vec<String>>, shipment_id_list: Option<Vec<String>>, last_updated_after: Option<String>, last_updated_before: Option<String>, next_token: Option<&str>) -> Result<crate::models::GetShipmentsResponse, Error<GetShipmentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = shipment_status_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ShipmentStatusList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ShipmentStatusList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = shipment_id_list {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("ShipmentIdList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("ShipmentIdList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = last_updated_after {
        local_var_req_builder = local_var_req_builder.query(&[("LastUpdatedAfter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated_before {
        local_var_req_builder = local_var_req_builder.query(&[("LastUpdatedBefore", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("QueryType", &query_type.to_string())]);
    if let Some(ref local_var_str) = next_token {
        local_var_req_builder = local_var_req_builder.query(&[("NextToken", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("MarketplaceId", &marketplace_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetShipmentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn get_transport_details(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::GetTransportDetailsResponse, Error<GetTransportDetailsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTransportDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn put_transport_details(configuration: &configuration::Configuration, shipment_id: &str, body: crate::models::PutTransportDetailsRequest) -> Result<crate::models::PutTransportDetailsResponse, Error<PutTransportDetailsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutTransportDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn update_inbound_shipment(configuration: &configuration::Configuration, shipment_id: &str, body: crate::models::InboundShipmentRequest) -> Result<crate::models::InboundShipmentResponse, Error<UpdateInboundShipmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateInboundShipmentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
pub async fn void_transport(configuration: &configuration::Configuration, shipment_id: &str) -> Result<crate::models::VoidTransportResponse, Error<VoidTransportError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/void", local_var_configuration.base_path, shipmentId=crate::apis::urlencode(shipment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VoidTransportError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

